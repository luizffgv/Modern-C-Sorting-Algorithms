/*
    Copyright Â© 2021 Luiz Fernando F. G. Valle
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file
 * @author Luiz Fernando F. G. Valle (github.com/luizffgv)
 * @brief A set of utilities for comparing two objects
 * @version 1.1
 * @date 2021-04-01
 *
 * @copyright Copyright (c) 2021
 */

 // TODO: Add ComparerFor macro that automatically chooses comparer for a type

#ifndef ORDERING_COMPARER_H_INCLUDED
#define ORDERING_COMPARER_H_INCLUDED

#include "Ordering/ordering.h"





// Typedefs ----------------------------------------------------------------- >>

/// Function that compares two values and returns the proper Ordering
typedef Ordering (*Comparer)(void *, void *);





// Macros ------------------------------------------------------------------- >>

/// Generates an arithmetic comparer with the specified name and type
#define COMPARER_ARITHMETIC_FUNC_DEF(name, type) \
    Ordering name(void *first, void *second) \
    { \
        type first_val  = *(type *)first; \
        type second_val = *(type *)second; \
    \
        return first_val < second_val ? ordering_less : first_val > second_val ? ordering_greater : ordering_equal; \
    }

/// Generates the declaration of a function generated by the macro COMPARER_ARITHMETIC_FUNC_DEF
#define COMPARER_ARITHMETIC_FUNC_DECL(name, type) \
    Ordering name(void *first, void *second);

/// Generates a comparer that inverts the result of another
#define COMPARER_INVERSOR_FUNC_DEF(name, original) \
    Ordering name(void *first, void *second) \
    { \
        return -original(first, second); \
    }

/// Generates the declaration of a function generated by the macro COMPARER_INVERSOR_FUNC_DEF
#define COMPARER_INVERSOR_FUNC_DECL(name) \
    Ordering name(void *first, void *second);

#endif // #ifndef ORDERING_COMPARER_H_INCLUDED
